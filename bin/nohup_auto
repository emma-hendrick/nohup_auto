#!/usr/bin/env python3
import subprocess
import sys
import os

# Get the directory the code is stored in
script_dir = os.path.dirname(os.path.abspath(__file__))
current_working_directory = os.getcwd()

# Get the result of a command
def subprocess_result(args):
    result = subprocess.run(args, capture_output = True, text = True)
    return result.stdout.strip()


# Get nohup pid
def nohup_pid(directory):
    return f"{directory}/nohup.pid"

# Get nohup log
def nohup_log(directory):
    return f"{directory}/nohup.auto.log"

# Get nohup start script
def nohup_script(directory):
    return f"{directory}/nohup.auto.start"

# Get gitignore file
def get_ignore(directory):
    return f"{directory}/.gitignore"

# Get nohup active
def nohup_active():
    return f"{script_dir}/nohup.active"


# Add lines to a file in a directory if they are not already there
def add_lines(filename, lines_needed):
 
    # Get the current gitignore
    subprocess.run(["touch", filename])
    ignore_file = subprocess_result(["cat", filename])

    # Add the needed lines to the file
    for item in lines_needed:
        if item not in ignore_file:
            subprocess.run(f"echo \"{item}\" >> {filename}", shell=True)


# Remove lines from a file in a directory if they are there
def remove_lines(filename, lines_to_remove):
    exclude_arg = "|".join(lines_to_remove)
    subprocess.run(f"grep -v -E '{exclude_arg}' {filename} > .temp; mv .temp {filename}", shell=True)


# Kill a nohup instance in a specific location
def kill(directory):

    # Get the relevant files
    pid_filename = nohup_pid(directory)
    log_filename = nohup_log(directory)
    active_filename = nohup_active()

    # Get the pid
    subprocess.run(["touch", pid_filename])
    pid = subprocess_result(["cat", pid_filename])

    # Kill the process with the pid in the nohup.pid
    subprocess.run(["kill", pid])

    # Remove the pid file and the log file
    subprocess.run(["rm", pid_filename])
    subprocess.run(["rm", log_filename])

    # Remove the dir from nohup.active
    remove_lines(active_filename, [current_working_directory])


# Start a nohup_instance in a specific location
def start(directory):

    # Get the relevant files
    pid_filename = nohup_pid(directory)
    log_filename = nohup_log(directory)
    script_filename = nohup_script(directory)
    active_filename = nohup_active()

    # Get the start command to use from nohup.start.script
    command = subprocess_result(["cat", script_filename])

    # Start the process in the background
    subprocess.run(f"nohup {command} > {log_filename} & echo $! > {pid_filename}", shell=True)

    # Add the directory to nohup.active
    subprocess.run(["touch", active_filename])
    add_lines(active_filename, [current_working_directory])


# Update the gitignore at a specific location
def update_gitignore(directory):

    # Get the relevant file
    gitignore = get_ignore(directory)

    # Add each line its missing
    add_lines(gitignore, ["*.pid", "*.log", "nohup.auto.start"])       


# Get the log of a current nohup instance in a specific location
def getlog(directory):

    # Get the relevant files
    log_filename = nohup_log(directory)
    log = subprocess_result(["cat", log_filename])

    # Return the log
    return log   


# Yayyyyy nohup, hopefully this tool can actually be helpful
if __name__ == "__main__":
    arg_len = len(sys.argv)
    if arg_len > 1:
        subcommand = sys.argv[1]
    else:
        subcommand = "None"

    # Run the subcommand, the first argument to the program

    # STANDARD COMMANDS
    # Start the process!
    if subcommand == "start":
        start(current_working_directory)

    # Kill the process!
    elif subcommand == "kill":
        kill(current_working_directory)

    # Print the process status!
    elif subcommand == "status":
        print(getlog(current_working_directory))

    # Update gitignore to ignore the files generated by this
    elif subcommand == "updategitignore":
        update_gitignore(current_working_directory)

    # BATCH PROCESSING COMMANDS
    # Kill all processes
    elif subcommand == "killall":
        # Get the dirs from nohup.active
        pass

    # Register program to a list
    elif subcommand == "register":
        pass

    # Unregister the program from the list
    elif subcommand == "unregister":
        pass

    # Start all registered programs in that list
    elif subcommand == "startreg":
        pass

    # Kill all registered programs in that list
    elif subcommand == "killreg":
        pass

    # Someone was being annoying and gave us an invalid command
    else:
        print(f"Argument {subcommand} not recognized; valid commands are start, kill, status, updategitignore; get good scrub :)")
        print("A few new commands are killall, register, unregister, startreg.")

# If someone tries to import this ask them to stop lmao
else:
    print("Why u importing this, its not made for thatttttttttt, just use the standaloneeeeeeeee...")
