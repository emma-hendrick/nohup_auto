import subprocess
import sys

# Yayyyyy nohup, hopefully this tool can actually be helpful
if __name__ == "__main__":
    subcommand = sys.argv[1]

    # Run the subcommand, the first argument to the program
    # Start the process!
    if subcommand == "start":
        pass
        # subprocess.run(["", ""])

    # Kill the process!
    elif subcommand == "kill":
        # Get the pid from nohup.pid
        result = subprocess.run(
            ["cat", "nohup.pid"],
            capture_output = True,
            text = True
        )
        print(result.stdout.strip())
        # Kill the process with the pid in the nohup.pid
        # subprocess.run(["kill", result.stdout])
        # subprocess.run(["rm", "nohup.pid"])
        # subprocess.run(["rm", "nohup.auto.log"])

    # Print the process status!
    elif subcommand == "status":
        pass
        # subprocess.run(["", ""])

    # Update gitignore to ignore the files generated by this
    elif subcommand == "gitignoreupdate":
        # Get the current gitignore
        subprocess.run(["touch", ".gitignore"])
        result = subprocess.run(
            ["cat", ".gitignore"],
            capture_output = True,
            text = True
        )
        
        ignore_file = result.stdout.strip()
        lines_needed = ["*.pid", "*.log"]
        for item in lines_needed:
            if item not in ignore_file:
                subprocess.run(f"echo \"{item}\" >> .gitignore", shell=True)

    # Someone was being annoying and gave us an invalid command
    else:
        print(f"Argument {subcommand} not recognized; valid commands are start, kill, status, gitignoreupdate; get good scrub :)")
        # subprocess.run(["ls", "-a"])

# If someone tries to import this ask them to stop lmao
else:
    print("Why u importing this, its not made for thatttttttttt, just use the standaloneeeeeeeee...")
